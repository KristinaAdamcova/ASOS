// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String     @id @default(cuid())
  email String  @unique
  name  String?
  password String
  products Product[]
  histories History[]
  ratingsGiven     Rating[] @relation("RatingsGiven")
  ratingsReceived  Rating[] @relation("RatingsReceived")
  
  // for next-auth
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Product {
  id    String     @id @default(cuid())
  photoPath String
  name  String
  description  String
  category  String
  available Int
  price Float
  city  String
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  histories History[]
}

model History {
  id    String     @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  productId  String
  product    Product   @relation(fields: [productId], references: [id])
  timestamp DateTime @default(now())
}

model Rating {
  id    String     @id @default(cuid())
  ratedById  String
  ratedToId  String
  description String
  rating Int
  ratedBy      User  @relation("RatingsGiven", fields: [ratedById], references: [id])
  ratedTo      User  @relation("RatingsReceived", fields: [ratedToId], references: [id])

}